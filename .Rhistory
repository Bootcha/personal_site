(result = score.sentiment(sample,positive,negative))
trump.scores = score.sentiment(trump.text,positive,negative,.progress="text")
clinton.scores = score.sentiment(clinton.text,positive,negative,.progress="text")
trump.scores$code = "DT"
clinton.scores$code = "HC"
names(trump.scores) <- names(clinton.scores$code)
all.scores = rbind(trump.scores, clinton.scores)
all.scores<-0
all.scores = rbind(trump.scores, clinton.scores)
all.scores<-data.frame()
all.scores = rbind(trump.scores, clinton.scores)
source('~/.active-rstudio-document', echo=TRUE)
nrow(clinton.scores)
nrow(trump.scores)
ncol(trump.scores)
ncol(clinton.scores)
class(clinton.scores)
class(trump.scores)
typeof(clinton.scores)
typeof(trump.scores)
all.scores = rbind(trump.scores, clinton.scores)
all.scores<-data.frame()
all.scores = rbind(trump.scores, clinton.scores)
qplot(trump.scores$score)
library(qqplot2)
library(ggplot2)
qplot(trump.scores$score)
qplot(clinton.scores$score)
trump.scores = score.sentiment(trump.text,positive,negative,.progress="text")
qplot(trump.scores$score)
qplot(clinton.scores$score)
ggplot(data=all.scores) +
geom_bar(mapping=aes(x=score,fill=code),binwidth=1) +
facet_grid(airline~.) +
theme_bw()+scale_fill_brewer()
trump.scores$code = "DT"
clinton.scores$code = "HC"
names(trump.scores) <- names(clinton.scores$code)
all.scores = rbind(trump.scores, clinton.scores)
ggplot(data=all.scores) +
geom_bar(mapping=aes(x=score,fill=code),binwidth=1) +
facet_grid(airline~.) +
theme_bw()+scale_fill_brewer()
qplot(clinton.scores$score)
qplot(trump.scores$score)
trump.scores = score.sentiment(trump.text,positive,negative,.progress="text")
clinton.scores = score.sentiment(clinton.text,positive,negative,.progress="text")
trump.scores$code = "DT"
clinton.scores$code = "HC"
names(clinton.scores$code) <- names(trump.scores)
trump.scores = score.sentiment(trump.text,positive,negative,.progress="text")
clinton.scores = score.sentiment(clinton.text,positive,negative,.progress="text")
trump.scores$code = "DT"
clinton.scores$code = "HC"
names(clinton.scores) <- names(trump.scores)
all.scores = rbind(trump.scores, clinton.scores)
library(ggplot2)
qplot(trump.scores$score)
qplot(clinton.scores$score)
ggplot(data=all.scores) +
geom_bar(mapping=aes(x=score,fill=code),binwidth=1) +
facet_grid(airline~.) +
theme_bw()+scale_fill_brewer()
clinton.scores$code
trump.scores$code
ggplot(data=all.scores) +
geom_bar(mapping=aes(x=score,fill=code),binwidth=1) +
facet_grid(airline~.) +
theme_bw()+scale_fill_brewer()
ggplot(data=all.scores) +
geom_bar(mapping=aes(x=score,fill=code),binwidth=1) +
facet_grid(code~.) +
theme_bw()+scale_fill_brewer()
ggplot(data=all.scores) +
geom_bar(mapping=aes(x=score,fill=code)) +
facet_grid(code~.) +
theme_bw()+scale_fill_brewer()
all.scores$very.pos = as.numeric(all.scores$score >= 2)
all.scores$very.neg = as.numeric(all.scores$score <= -2)
twitter.df = ddply(all.scores,"code",summarise,pos.count=sum(very.pos),neg.count=sum(very.neg))
all.scores$very.pos = as.numeric(all.scores$score >= 2)
all.scores$very.neg = as.numeric(all.scores$score <= -2)
twitter.df = ddply(all.scores,"code",summarise,pos.count=sum(very.pos),neg.count=sum(very.neg))
twitter.df$all.count = twitter.df$pos.count + twitter.df$neg.count
twitter.df$score = round(100 * twitter.df$pos.count/twitter.df$neg.count)
twitter.df
mean(clinton.scores$score)
mean(trump.scores$score)
dim(trump.tweets)
trump.df <- twListToDF(trump.tweets)
dim(trump.df)
library(tm)
trump.Corpus <- Corpus(VectorSource(trump.df$text))
trump.Corpus <- tm_map(trump.Corpus, content_transformer(tolower))
trump.Corpus <- Corpus(VectorSource(trump.df$text))
removeURL <- function(x) gsub("http[^[:space:]]*", "", x)
trump.Corpus <- tm_map(trump.Corpus, content_transformer(removeURL))
removeNumPunct <- function(x) gsub("[^[:alpha:][:space:]]*", "", x)
trump.Corpus <- tm_map(trump.Corpus, content_transformer(removeNumPunct))
trump.Corpus <- tm_map(trump.Corpus, content_transformer(tolower))
myStopwords <- stopwords('english')
trump.Corpus <- tm_map(trump.Corpus, removeWords, myStopwords)
trump.Corpus <- tm_map(trump.Corpus, stripWhitespace)
trump.Corpus <- tm_map(trump.Corpus, stemDocument)
stemCompletion2 <- function(x, dictionary) {
x <- unlist(strsplit(as.character(x), " "))
# Unexpectedly, stemCompletion completes an empty string to
# a word in dictionary. Remove empty string to avoid above issue.
x <- x[x != ""]
x <- stemCompletion(x, dictionary=dictionary)
x <- paste(x, sep="", collapse=" ")
PlainTextDocument(stripWhitespace(x))
}
trump.Corpus <- lapply(trump.Corpus, stemCompletion2, dictionary=myCorpusCopy)
trump.Corpus <- Corpus(VectorSource(trump.df$text))
removeURL <- function(x) gsub("http[^[:space:]]*", "", x)
trump.Corpus <- tm_map(trump.Corpus, content_transformer(removeURL))
removeNumPunct <- function(x) gsub("[^[:alpha:][:space:]]*", "", x)
trump.Corpus <- tm_map(trump.Corpus, content_transformer(removeNumPunct))
trump.Corpus <- tm_map(trump.Corpus, content_transformer(tolower))
myStopwords <- stopwords('english')
trump.Corpus <- tm_map(trump.Corpus, removeWords, myStopwords)
trump.Corpus <- tm_map(trump.Corpus, stripWhitespace)
trump.CorpusCopy <- trump.Corpus
trump.Corpus <- tm_map(trump.Corpus, stemDocument)
stemCompletion2 <- function(x, dictionary) {
x <- unlist(strsplit(as.character(x), " "))
# Unexpectedly, stemCompletion completes an empty string to
# a word in dictionary. Remove empty string to avoid above issue.
x <- x[x != ""]
x <- stemCompletion(x, dictionary=dictionary)
x <- paste(x, sep="", collapse=" ")
PlainTextDocument(stripWhitespace(x))
}
trump.Corpus <- lapply(trump.Corpus, stemCompletion2, dictionary=trump.CorpusCopy)
trump.Corpus <- Corpus(VectorSource(trump.Corpus))
tdm <- TermDocumentMatrix(trump.Corpus,control = list(wordLengths = c(1, Inf)))
tdm
(freq.terms <- findFreqTerms(tdm, lowfreq = 15))
(freq.terms <- findFreqTerms(tdm, lowfreq = 20))
(freq.terms <- findFreqTerms(tdm, lowfreq = 50))
term.freq <- rowSums(as.matrix(tdm))
term.freq <- subset(term.freq, term.freq >= 50)
df <- data.frame(term = names(term.freq), freq = term.freq)
library(ggplot2)
ggplot(df, aes(x = term, y = freq)) + geom_bar(stat = "identity") +
xlab("Terms") + ylab("Count") + coord_flip()
findAssocs(tdm, "donate", 0.2)
findAssocs(tdm, "hillaryclinton", 0.2)
library(graph)
library(Rgraphviz)
plot(tdm, term = freq.terms, corThreshold = 0.1, weighting = T)
plot(tdm, term = freq.terms, corThreshold = 0.9, weighting = T)
plot(tdm, term = freq.terms, corThreshold = 0.95, weighting = T)
tdm2 <- removeSparseTerms(tdm, sparse = 0.95)
m2 <- as.matrix(tdm2)
# cluster terms
distMatrix <- dist(scale(m2))
fit <- hclust(distMatrix, method = "ward")
fit <- hclust(distMatrix, method = "ward.D")
rect.hclust(fit, k = 6)
plot(fit)
rect.hclust(fit, k = 6)
dtm <- as.DocumentTermMatrix(tdm)
library(topicmodels)
lda <- LDA(dtm, k = 8) # find 8 topics
(term <- terms(lda, 6))
(term <term <- apply(term, MARGIN = 2, paste, collapse = ", ")- terms(lda, 6))
(term <term <- apply(term, MARGIN = 2, paste, collapse = ", ")
term <- apply(term, MARGIN = 2, paste, collapse = ", ")
topic <- topics(lda, 1)
topics <- data.frame(date=as.IDate(tweets.df$created), topic)
qplot(date, ..count.., data=topics, geom="density",
fill=term[topic], position="stack")
tweets.ihpone <- searchTwitter("iPhone7",lang="en",since="2016-10-01",until="2016-10-15")
api_key <- "NmeodU7OyVuCg1nspLrmi7UWY"
api_secret <- "YhMAcCoYSeF2DGRWJQ7q0GHmy8qoOECHqjRtLyzPemU6iSquR4"
access_token <- "157170948-KrankoeKG0w3aF45lCBF068kzoTMLRwFFIrrMDat"
access_token_secret <- "pQcLUsZovlvYlhzv7ZCxDPDf3AZaoz7vknteYNy1bboH5"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
tweets.ihpone <- searchTwitter("iPhone7",lang="en",since="2016-10-01",until="2016-10-15")
library(XML)
results <- htmlTreeParse(getURL("http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html", followlocation=TRUE), useInternal=TRUE)
library(RCurl)
results <- htmlTreeParse(getURL("http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html", followlocation=TRUE), useInternal=TRUE)
View(results)
billboard_text <- xpathSApply(results, "//table[@class='os']//tr",xmlValue)
View(billboard_text)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
library(stringr)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
View(split_billboard_text)
View(split_billboard_text)
split_billboard_text <- str_split_fixed(billboard_text,"\n",10)
results <- htmlTreeParse(getURL("http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html", followlocation=TRUE), useInternal=TRUE)
execution_text <- xpathSApply(results, "//table[@class='os']//tr",xmlValue)
split_execution_text <- str_split_fixed(execution_text,"\n",10)
View(split_execution_text)
execution <- as.data.frame(split_execution_text, stringsAsFactors = FALSE)
View(execution)
length(split_execution_text)
dim(split_execution_text)
dim(split_execution_text)[1]
execution <- as.data.frame(split_execution_text[2:dim(split_execution_text)[1],], stringsAsFactors = FALSE)
billboard <- as.data.frame(cbind(split_billboard_text[2:101,-c(2,3)], rep(i,100)), stringsAsFactors=FALSE)
execution <- as.data.frame(split_execution_text[2:dim(split_execution_text)[1],-c(2,3)], stringsAsFactors = FALSE)
colnames(execution)
colnames(execution)<â™¥-
colnames(execution) <- c("Exec","Surname","Name","TDCJ","Age","Date","Race","County")
i <- 1
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last",sep="")
URL
execution$Surname <- gsub('\\"', "", allthesongs$Surname)
execution$Surname <- gsub('\\"', "", execution$Surname)
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
(URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep=""))
execution$Surname <- tolower(gsub("[^[:alnum:] ]", "", execution$Surname))
(URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep=""))
execution$Surname <- gsub('\\"', "", execution$Surname)
execution$Surname <- tolower(gsub("[^[:alnum:] ]", "", execution$Surname))
(URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep=""))
execution$Surname <- gsub("\\'", "", iconv(execution$Surname, to='ASCII//TRANSLIT'))
(URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep=""))
execution$Surname <- tolower(gsub("[^[:alnum:] ]", "", execution$Surname))
execution$Name <- tolower(gsub("[^[:alnum:] ]", "", execution$Name))
(URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep=""))
execution$Surname <- gsub(" ", "", execution$Surname)
execution$Surname <- tolower(gsub("[^[:alnum:] ]", "", execution$Surname))
execution$Name <- tolower(gsub("[^[:alnum:] ]", "", execution$Name))
(URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep=""))
execution <- as.data.frame(split_execution_text[2:dim(split_execution_text)[1],-c(2,3)], stringsAsFactors = FALSE)
colnames(execution) <- c("Exec","Surname","Name","TDCJ","Age","Date","Race","County")
execution$Surname <- gsub(" ", "", execution$Surname)
execution$Surname <- tolower(gsub("[^[:alnum:] ]", "", execution$Surname))
execution$Name <- gsub(" ", "", execution$Name)
execution$Name <- tolower(gsub("[^[:alnum:] ]", "", execution$Name))
(URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep=""))
execution$LastStatement <- ""
length(execution)
dim(execution)
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
pom <- xpathSApply(results, "//p[@class='text_bold']//tr",xmlValue)
pom
pom <- xpathSApply(results, "//div[@id='bottom_nav']//tr",xmlValue)
pom <- xpathSApply(results, "//[@class='bold']//tr",xmlValue)
pom <- xpathSApply(results, "//[@class='bold']",xmlValue)
pom <- xpathSApply(results, "//*[@class='bold']",xmlValue)
pom
pom <- xpathSApply(results, "//*[@class='text_bold']",xmlValue)
pom
pom <- xpathSApply(results, "//p",xmlValue)
pom
pom[7]
class(execution$LastStatement)
for (i in 1:dim(execution)[1]) {
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
last <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
execution$LastStatement[i] <- last[7]
}
for (i in 1:dim(execution)[1]) {
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
last <- xpathSApply(results, "//p",xmlValue)
execution$LastStatement[i] <- last[7]
}
last
length(last)
last[3:length(last)]
last[4:length(last)]
execution[execution$LastStatement=="NA",]
execution[execution$LastStatement==NA,]
execution[1:10,]
execution[1,1]
execution$Exec <- tolower(gsub("[^[:alnum:] ]", "", execution$Exec))
execution[1,1]
exec_pom <- execution
dim(execution)
execution <- as.data.frame(split_execution_text[2:dim(split_execution_text)[1],-c(2,3)], stringsAsFactors = FALSE)
colnames(execution) <- c("Exec","Surname","Name","TDCJ","Age","Date","Race","County")
for (i in 1:dim(execution)[2]) {
execution[,i] <- gsub(" ", "",execution[,i])
execution[,i] <- tolower(gsub("[^[:alnum:] ]", "",execution[,i])
}
for (i in 1:dim(execution)[2]) {
execution[,i] <- gsub(" ", "",execution[,i])
execution[,i] <- tolower(gsub("[^[:alnum:] ]", "",execution[,i]))
}
execution[1,]
execution[2,]
execution[54,]
View(exec_pom)
i <- 7
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
last <- xpathSApply(results, "//p",xmlValue)
last
i <- 6
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
last <- xpathSApply(results, "//p",xmlValue)
last
i <- 26
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
last <- xpathSApply(results, "//p",xmlValue)
last
length(last)
# stahnuti zakladnich dat
results <- htmlTreeParse(getURL("http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html", followlocation=TRUE), useInternal=TRUE)
execution_text <- xpathSApply(results, "//table[@class='os']//tr",xmlValue)
split_execution_text <- str_split_fixed(execution_text,"\n",10)
# prevedeni na data frame
execution <- as.data.frame(split_execution_text[2:dim(split_execution_text)[1],-c(2,3)], stringsAsFactors = FALSE)
colnames(execution) <- c("Exec","Surname","Name","TDCJ","Age","Date","Race","County")
# castecne cisteni
for (i in 1:dim(execution)[2]) {
execution[,i] <- gsub(" ", "",execution[,i])
execution[,i] <- tolower(gsub("[^[:alnum:] ]", "",execution[,i]))
}
# pridani last statement
execution$LastStatement <- ""
for (i in 1:dim(execution)[1]) {
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
last <- xpathSApply(results, "//p",xmlValue)
execution$LastStatement[i] <- last[length(last)]
}
View(execution)
last
i <- 10
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE)
last <- xpathSApply(results, "//p",xmlValue)
execution$LastStatement[i] <- last[length(last)]
last
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE, encoding="UTF-8")
last <- xpathSApply(results, "//p",xmlValue)
last
which(last=="Last Statement: ")
last[which(last=="Last Statement: "):length(last)]
paste(last[which(last=="Last Statement: "):length(last)],sep=" ")
paste("c","a",sep="1")
paste(as.vector(last[which(last=="Last Statement: "):length(last)]),sep=" ")
a <- c("abd","sdg","dfg","dfhfgh","fdgh")
paste(a[1:3],sep=" ")
class(last)
class(a)
paste(last[1:3],sep = "111")
paste(last[1:3],sep = "mezera")
last
View(last)
paste(as.vector(last[which(last=="Last Statement: "):length(last)]))
paste(as.vector(last[which(last=="Last Statement: ")+1:length(last)]))
paste(as.vector(last[(which(last=="Last Statement: ")+1):length(last)]))
paste(last[(which(last=="Last Statement: ")+1):length(last)])
paste(last[(which(last=="Last Statement: ")+1):length(last)],collapse ="")
paste(last[(which(last=="Last Statement: ")+1):length(last)],collapse =" ")
grepl("Last Statement: ",last)
last[grepl("Last Statement: ",last)]
paste(last[(grepl("Last Statement: ",last))+1):length(last)],collapse =" ")
paste(last[(grepl("Last Statement: ",last)+1):length(last)],collapse =" ")
grepl("Last Statement: ",last)
grepl("Last Statement: ",last) + 1
last[grepl("Last Statement: ",last)]
grepl("Last Statement: ",last) + 1
last[grepl("Last Statement: ",last)]
grep("Last Statement: ",last)
grepl("Last Statement: ",last)
paste(last[(grep("Last Statement: ",last)+1):length(last)],collapse =" ")
results <- htmlTreeParse(getURL("http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html", followlocation=TRUE), useInternal=TRUE)
execution_text <- xpathSApply(results, "//table[@class='os']//tr",xmlValue)
split_execution_text <- str_split_fixed(execution_text,"\n",10)
# prevedeni na data frame
execution <- as.data.frame(split_execution_text[2:dim(split_execution_text)[1],-c(2,3)], stringsAsFactors = FALSE)
colnames(execution) <- c("Exec","Surname","Name","TDCJ","Age","Date","Race","County")
# castecne cisteni
for (i in 1:dim(execution)[2]) {
execution[,i] <- gsub(" ", "",execution[,i])
execution[,i] <- tolower(gsub("[^[:alnum:] ]", "",execution[,i]))
}
# pridani last statement
execution$LastStatement <- ""
for (i in 1:dim(execution)[1]) {
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE, encoding="UTF-8")
last <- xpathSApply(results, "//p",xmlValue)
execution$LastStatement[i] <- paste(last[(grep("Last Statement: ",last)+1):length(last)],collapse =" ")
}
i <- 1
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE, encoding="UTF-8")
last <- xpathSApply(results, "//p",xmlValue)
execution$LastStatement[i] <- paste(last[(grep("Last Statement: ",last)+1):length(last)],collapse =" ")
last
grep("Last Statement: ",last)
execution$LastStatement[i] <- paste(last[(grep("Last Statement:",last)+1):length(last)],collapse =" ")
last
paste(last[(grep("Last Statement:",last)+1):length(last)],collapse =" ")
execution$LastStatement[i] <- paste(last[(grep("Last Statement:",last)+1):length(last)],collapse =" ")
for (i in 1:dim(execution)[1]) {
URL <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/",execution[i,2],execution[i,3],"last.html",sep="")
results <- htmlTreeParse(getURL(URL, followlocation=TRUE), useInternal=TRUE, encoding="UTF-8")
last <- xpathSApply(results, "//p",xmlValue)
execution$LastStatement[i] <- paste(last[(grep("Last Statement:",last)+1):length(last)],collapse =" ")
}
i
last
grep("Last Statement:",last)
grepL("Last Statement:",last)
grepl("Last Statement:",last)
any(grepl("The Web page you requested is no longer available",last) == TRUE)
grepl("The Web page you requested is no longer available",last) == TRUE
library(RWeka)
version
dt <- data.frame(user_id = sample(1:5, replace=T, 20))
dt
dt <- data.frame(user_id = sample(1:5, replace=T, 20), order_date = sample(c('pondeli', 'utery', 'streda'), replace=T, 20), item_id = 1:20)
dt
dt <- dt[order(dt$user_id),]
dt
dt <- dt[order(dt$user_id, dt$order_date),]
dt
dt <- data.frame(user_id = sample(1:5, replace=T, 20), order_date = sample(c('monday', 'tuesday', 'wednesday'), replace=T, 20), item_id = 1:20)
dt <- dt[order(dt$user_id, dt$order_date),]
dt
aggregate(item_id ~ user_id + order_date, date=dt)
aggregate(dt$item_id ~ dt$user_id + dt$order_date)
aggregate(dt$item_id ~ dt$user_id + dt$order_date, FUN = sum)
aggregate(item_id ~ user_id + order_date, data=dt, FUN = sum)
aggregate(item_id ~ user_id + order_date, data=dt, FUN = length)
dt
test_data < as.data.frame(matrix(ncol=3,nrow=5,c(1,1,1,2,4,111,34,111,456,533,555,958,555,1,2)))
test_data < as.data.frame(matrix(ncol=3,nrow=5,c(1,1,1,2,4,111,34,111,456,533,555,958,555,1,2)))
matrix(ncol=3,nrow=5,c(1,1,1,2,4,111,34,111,456,533,555,958,555,1,2))
test_data <- as.data.frame(matrix(ncol=3,nrow=5,c(1,1,1,2,4,111,34,111,456,533,555,958,555,1,2)))
colnames(test_data) <- c("user_id","order_date","item_id")
test_data
aggregate(item_id ~ user_id + order_date, data=test_data, FUN = length)
aggregate(1 ~ user_id + order_date + item_id, data=test_data, FUN = length)
aggregate(1 ~ user_id + order_date + item_id, data=test_data, FUN = length)
aggregate(item_id ~ user_id + order_date + item_id, data=test_data, FUN = length)
dt <- data.frame(user_id = rep(1:5, each=4), order_date = sample(c('monday', 'tuesday', 'wednesday'), replace=T, 20), item_id = 1:20)
dt <- dt[order(dt$user_id, dt$order_date),]
dt
dt <- data.frame(user_id = sample(1:5, repalce=T, 20), order_date = sample(c('monday', 'tuesday', 'wednesday'), replace=T, 20), item_id = sample(c('A', 'B', 'C'), replace=T, 20))
dt <- data.frame(user_id = sample(1:5, replace=T, 20), order_date = sample(c('monday', 'tuesday', 'wednesday'), replace=T, 20), item_id = sample(c('A', 'B', 'C'), replace=T, 20))
dt <- dt[order(dt$user_id, dt$order_date),]
dt
aggregate(item_id ~ user_id + order_date, data=dt, FUN = length)
dcast()
library(reshape2)
dcast()
dcast(dt, 1 ~ orde_idr)
dcast(dt, 1 ~ order_id)
dcast(dt, 1 ~ user_id)
dcast(dt, 1 ~ user_id + order_date + item_di)
dcast(dt, 1 ~ user_id + order_date + item_id)
dcast(dt, item_id ~ user_id + order_date)
dcast(dt, user_id + order_date ~ item_id)
dcast(dt, user_id + order_date + item_id ~ item_id)
dcast(dt, user_id + order_date ~ item_id)
dt
dt <- dt[order(dt$user_id, dt$order_date, dt$item_id),]
dcast(dt, user_id + order_date ~ item_id)
dt
dcast(dt, user_id + order_date ~ item_id, length)
dcast(dt, user_id + order_date ~ item_id, length, value.var = item_id)
dcast(dt, user_id + order_date ~ item_id, length, value.var = 'item_id')
install.packages("shiny")
library(shiny)
fluidPage(
textOutput("user")
)
function(input, output) {
output$user <- renderText({
Sys.info()["user"]
})
}
runApp('C:/Users/Bootcha/Desktop/test')
install.packages('arules')
library(arules)
mytestdata <- read.csv("C:/Users/Bootcha/Desktop/test/test.csv", header=T,
colClasses = "factor", sep = ",")
head(mytestdata)
mytestdata <- read.csv("C:/Users/Bootcha/Desktop/test/test.csv", header=T,
colClasses = "factor", sep = ";")
head(mytestdata)
str(mytestdata)
myrules <- apriori(mytestdata,
parameter = list(supp = 0.1, conf = 0.1, maxlen=10, minlen=2),
appearance = list(rhs=c("Disease.1=HTN")))
summary(myrules)
inspect(myrules)
mytestdata <- read.csv("C:/Users/Bootcha/Desktop/test/test.csv", header=T,
colClasses = "factor", sep = ";", na.strings='')
myrules <- apriori(mytestdata,
parameter = list(supp = 0.1, conf = 0.1, maxlen=10, minlen=2),
appearance = list(rhs=c("Disease.1=HTN")))
summary(myrules)
inspect(myrules)
install.packages('rmarkdown', type='source')
setwd('C:/Users/Bootcha/git/personal_site')
source('C:/Users/Bootcha/git/personal_site/build_site.R', echo=TRUE)
library(rmarkdown)
install.packages('rmarkdown')
library(rmarkdown)
install.packages('stringi')
library(rmarkdown)
source('C:/Users/Bootcha/git/personal_site/build_site.R', echo=TRUE)
